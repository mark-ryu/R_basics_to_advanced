x->seq(1:10)
x<-seq(1:10)
plot(x)
plot (x,x+10)
getwd()
data<-("stats202log.txt", set= " ", header = F)
data<- ("stats202log.txt, set = " ", header = F)
1
2
32
ewf
sd
fsd
f
f
sdf
q
(q)
/q
q()
plot(1:1)
?rnorm
help.search("rnorm")
args("rnorm")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
rnorm
content <- url("http://www.jhsph.edu", "r")
x <- readLines(content)
head(x)
len(x)
lapply
ucscDb <- dbConnecet(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
dbConnect
/
find.package("devtools")
find_rtools()
library(devtools)
find_rtools
find_rtools()
library(devtools)
find_rtools()
packages.find("devtools")
packages.find(devtools)
find.package(devtools)
find.package("devtools")
package(devtools)
library(devtools)
find_rtools()
find_rtools()
x = -41
x
x + 16 == 25
x + 16 == -25
df = data.frame(x = seq(-10,10))
df
df$y = (3*df$x - 4) / 2
df
3x + 2y = 65
51.3(0.60)
51.3*0.6
54*0.05
54-2.7
110*0.10
5/8
4.5+ 4.5*0.33
1024 * 200
204800/100
204800*0.001
12500/2800
2800/12500
2738/11500
1750/8000
1404/8000
8+7+5+3.5+5.7+2
46 + 46.5
92. 5 + 31.2 + 43.7 + 41.4
92.5 + 31.2 + 43.7 + 41.4
31.2/208.8
9200 + 7000 + 12000 + 8700 + 6700 + 4500 + 7000 + 8000 + 7000
70100/9
95+19
114 *0.17
114*0.28
62/32
62+32
94/15
25+37
62*0.28
62:17
17/114
114-17
97/17
114-33
19.71 * 0.15
install.packages("dslabs")
a <- 1
b <- 1
c <- -1
a
b
c
print (a)
ls()
(-b + sqrt(b^2 - 4*a*c))/(2/a)
log(8)
log(a)
help("+")
data()
inf
Inf
library(dslabs)
data("murders")
class("murders")
class("data")
class(murders)
str(murders)
head(murders)
library(slabs)
sort(murders$total)
murders
murder_rate <- murders$total/murders$population*100000
murder_rate
max(murder_rate)
murders$state(order[murder_rate, decreasing = TRUE])
murders$statep[order(murder_rate, decreasing = TRUE)]
murders$state[order(murder_rate, decreasing = TRUE)]
install.packages("dplyr")
setwd(C:\Users\user\Untitled Folder)
setwd(C:/Users/user/Untitled Folder)
setwd(C://Users/user/Untitled Folder)
uber_1 <- read.csv("C:/Users/user/Untitled Folder/uber_1.csv")
View(uber_1)
uber_file <- read.csv(file = "uber_1.csv", sep = ",", header = TRUE)
setwd
ls
setwd(C:\Users\user\Untitled Folder)
setwd C:\Users\user\Untitled Folder
setwd \\C:\Users\user\Untitled Folder
setwd \\C:\Users\user\Untitled Folder
setwd?
C:\Users\user\Untitled Folder
help(setwd)
getwd
getwd()
setwd"C:\Users\user\Untitled Folder"
setwd"C:/Users/user/Untitled Folder"
setwd "C:/Users/user/Untitled Folder"
setwd ("C:/Users/user/Untitled Folder")
getwd()
uber_file <- read.csv(file = "uber_1.csv", sep = ",", header = TRUE)
uber_file
uber_file["Date"]
which(uber_file$Date)
class(uber_file$Date)
uber_file <- read.csv(file = "uber_1.csv", sep = ",", header = TRUEm stringsAsFactors = FALSE)
uber_file <- read.csv(file = "uber_1.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
UBER_FILE
uber_file
class(uber_file$Date)
which(uber_file$Date == "NA")
which(uber_file$Date == "NAN")
nan
NA
which(uber_file$Date == NA)
uber_file["Date"]
uber_first_column <- uber_file["Date"]
uber_first_column[2]
uber_first_column[,2]
filter(uber_file, Date == NA)
filter(uber_file, Date == NA)
filter(uber_file, class(Date) == "character")
name(uber_file)
names(uber_file)
filter(uber_file, "Date" == NA)
murders
library(dplyr)
library(dplyr)
filter(uber_1, Date == NA)
filtered <- filter(uber_1, Date == NA)
filtered
head(filtered)
as.date(uber_1$Date)
as.Date(uber_1$Date)
uber_1
class(uber_1$Date)
mutate(as.Date("Date"))
mutate(as.Date(Date))
mutate(uber_1, as.Date(Date))
class(uber_1$Date)
uber<- mutate(uber_1, as.Date(Date))
uber
class(uber$Date)
uber<- mutate(uber_1, as.Date(Date))
uber## First make up some mock data
my_data <- data.frame(date = seq(as.Date("2010-01-01"), as.Date("2015-12-31"),
by = "1 month"),
value = rnorm(72))
## Remove some observations so we have an incomplete data set
my_incomplete_data <- my_data[sort(sample(nrow(my_data), 60)), ]
## Make a data frame with a full series of dates from the min date to the max date
## in the incomplete data frame
full_dates <- seq(min(my_incomplete_data$date), max(my_incomplete_data$date),
by = "1 month")
full_dates <- data.frame(date = full_dates)
## Merge the complete data frame with the incomplete to fill in the dates and add
## NAs for missing values
my_complete_data <- merge(full_dates, my_incomplete_data, by = "date",
all.x = TRUE)
my_complete_data
my_data <- data.frame(date = seq(as.Date("2013-01-09"), as.Date("2013-31-09"), by = "1 day"))
install.package("lubridate")
install.packages("lubridate")
